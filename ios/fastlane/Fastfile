# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

setup_travis

package = load_json(json_path: "../package.json")

version_number = package["version"]

print("P TRAVIS_BRANCH" + ENV["TRAVIS_BRANCH"])

scheme_name = "Internal"
app_identifier = "de.democracy-deutschland.clientapp.internal"
if ENV["TRAVIS_BRANCH"] == 'refs/heads/alpha'
  scheme_name = "Alpha"
  app_identifier = "de.democracy-deutschland.clientapp.alpha"
end
if ENV["TRAVIS_BRANCH"] == 'refs/heads/internal'
  scheme_name = "Internal"
  app_identifier = "de.democracy-deutschland.clientapp.internal"
end
if ENV["TRAVIS_BRANCH"] == 'refs/heads/master'
  scheme_name = "client"
  app_identifier = "de.democracy-deutschland.clientapp"
end

api_key = app_store_connect_api_key(
    key_id: "3Q9U495BMY",
    issuer_id: "69a6de96-d63c-47e3-e053-5b8c7c11a4d1",
    key_filepath: "AuthKey_3Q9U495BMY.p8",
    duration: 1200, # optional (maximum 1200)
    in_house: false, # optional but may be required if using match/sigh
  )

platform :ios do
  desc "Installs the certificates locally"
    private_lane :install_certificates do
    if ENV['TRAVIS']
      tmp_keychain = "temporary_keychain"
      create_keychain(
        name: tmp_keychain,
        password: tmp_keychain,
        default_keychain: true,
        timeout: 3600,
        unlock: true,
      )
      match(
        type: "appstore",
        keychain_name: tmp_keychain,
        keychain_password: tmp_keychain,
        readonly: true,
        skip_confirmation: true,
      )
    else	
      match(
        type: "appstore"
      )
    end
  end

  desc "Push a new beta build to TestFlight"
  lane :beta do
    install_certificates

    # handle build_number
    build_number = latest_testflight_build_number(
      api_key: api_key,
      version: version_number,
      app_identifier: app_identifier
    ).to_i
    build_number_local = get_build_number(xcodeproj: "DemocracyNative.xcodeproj").to_i

    print "\n\n##### version numbers #####"
    print "\nbuild_number_local: "
    print build_number_local
    print "\nbuild_number: "
    print build_number


    build_number = [build_number_local,build_number].max + 1
    print "\nusing build_number: "
    print build_number
    increment_version_number(version_number: version_number)
    increment_build_number(
      xcodeproj: "DemocracyNative.xcodeproj",
      build_number: build_number
    )

    build_app(
      workspace: "DemocracyNative.xcworkspace", 
      scheme: scheme_name,
      clean: true,
    )

    # upload_to_browserstack_app_live(
    #   browserstack_username: ENV["BROWSERSTACK_USERNAME"],
    #   browserstack_access_key: ENV["BROWSERSTACK_ACCESS_KEY"],
    # )

    # TODO Add deliver

    upload_to_testflight(
      api_key: api_key,
      app_identifier: app_identifier,
      skip_waiting_for_build_processing: true
    )

    delete_keychain(name: "temporary_keychain")
  end
end
