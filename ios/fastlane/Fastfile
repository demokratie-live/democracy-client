# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

# print("P TRAVIS_BRANCH" + ENV["TRAVIS_BRANCH"])

# scheme_name = "Internal"
# app_identifier = ENV['BUNDLE_IDENTIFIER']
# if ENV["TRAVIS_BRANCH"] == 'refs/heads/alpha'
#   scheme_name = "Alpha"
#   app_identifier = "de.democracy-deutschland.clientapp.alpha"
# end
# if ENV["TRAVIS_BRANCH"] == 'refs/heads/internal'
#   scheme_name = "Internal"
#   app_identifier = ENV['BUNDLE_IDENTIFIER']
# end
# if ENV["TRAVIS_BRANCH"] == 'refs/heads/master'
#   scheme_name = "client"
#   app_identifier = "de.democracy-deutschland.clientapp"
# end

api_key = app_store_connect_api_key(
    key_id: "3Q9U495BMY",
    issuer_id: "69a6de96-d63c-47e3-e053-5b8c7c11a4d1",
    key_filepath: "AuthKey_3Q9U495BMY.p8",
    duration: 1200, # optional (maximum 1200)
    in_house: false, # optional but may be required if using match/sigh
  )

platform :ios do

  desc "Get certificates"
  lane :certificates do
    sync_code_signing(
      type: "development",
      app_identifier: ENV['BUNDLE_IDENTIFIER'],
      readonly: true
    )

    # You can repeate the sync_code_signing with other types of certificates such as appstore and adhoc
    sync_code_signing(
      type: "appstore",
      app_identifier: ENV['BUNDLE_IDENTIFIER'],
      readonly: true
    )
  end

  desc "Generate new certificates"
  lane :generate_new_certificates do
    sync_code_signing(
      type: "development",
      app_identifier: ENV['BUNDLE_IDENTIFIER'],
      readonly: false
    )
    sync_code_signing(
      type: "appstore",
      app_identifier: ENV['BUNDLE_IDENTIFIER'],
      readonly: false
    )
  end

  desc "Push a new beta build to TestFlight"
  lane :deploy do
    setup_ci if ENV['CI']
    
    certificates

    package = load_json(json_path: "../package.json")
    
    version_number = package["version"]

    # handle build_number
    build_number = latest_testflight_build_number(
      api_key: api_key,
      version: version_number,
      app_identifier: ENV['BUNDLE_IDENTIFIER']
    ).to_i
    build_number_local = get_build_number(xcodeproj: "DemocracyNative.xcodeproj").to_i

    print "\n\n##### version numbers #####"
    print "\nbuild_number_local: "
    print build_number_local
    print "\nbuild_number: "
    print build_number


    build_number = [build_number_local,build_number].max + 1
    print "\nusing build_number: "
    print build_number
    increment_version_number(version_number: version_number)
    increment_build_number(
      xcodeproj: "DemocracyNative.xcodeproj",
      build_number: build_number
    )

    build_app(
      workspace: "DemocracyNative.xcworkspace", 
      scheme: ENV['SCHEME_NAME'],
    )

    upload_to_testflight(
      api_key: api_key,
      app_identifier: ENV['BUNDLE_IDENTIFIER'],
      skip_waiting_for_build_processing: false
    )
  end
end
